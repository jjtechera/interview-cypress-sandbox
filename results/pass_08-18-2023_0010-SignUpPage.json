{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-18T03:10:08.817Z",
    "end": "2023-08-18T03:10:18.235Z",
    "duration": 9418,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "41fa9b71-b635-4a4c-9f7f-ec3cbee2e9ac",
      "title": "",
      "fullFile": "cypress/tests/integration/SignUpPage.feature",
      "file": "cypress/tests/integration/SignUpPage.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8cce195c-a092-42bc-ba28-82082c8568d8",
          "title": "SignUp Page",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Navigate to Sign up Validation (example #1)",
              "fullTitle": "SignUp Page Navigate to Sign up Validation (example #1)",
              "timedOut": null,
              "duration": 3854,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n    taskTestCaseStarted({\n        id: testCaseStartedId,\n        testCaseId,\n        attempt: attempt++,\n        timestamp: (0, messages_1.createTimestamp)(),\n    });\n}\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepStarted({\n                    testStepId: hook.id,\n                    testCaseStartedId,\n                    timestamp: start,\n                });\n            }\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            (0, cypress_1.runStepWithLogGroup)({\n                fn: () => registry.runHook(this, hook),\n                keyword: hook.keyword,\n                text: hook.tags,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const end = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepFinished({\n                    testStepId: hook.id,\n                    testCaseStartedId,\n                    testStepResult: {\n                        status: messages.TestStepResultStatus.PASSED,\n                        duration: (0, messages_1.duration)(start, end),\n                    },\n                    timestamp: end,\n                });\n            }\n            remainingSteps.shift();\n        });\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            internalProperties.currentStep = { pickleStep };\n            const start = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepStarted({\n                    testStepId: pickleStep.id,\n                    testCaseStartedId,\n                    timestamp: start,\n                });\n            }\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            try {\n                return (0, cypress_1.runStepWithLogGroup)({\n                    keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                    argument,\n                    text,\n                    fn: () => registry.runStepDefininition(this, text, argument),\n                }).then((result) => {\n                    return {\n                        start,\n                        result,\n                    };\n                });\n            }\n            catch (e) {\n                if (e instanceof registry_1.MissingDefinitionError) {\n                    throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                }\n                else {\n                    throw e;\n                }\n            }\n        })\n            .then(({ start, result }) => {\n            var _a, _b, _c;\n            const end = (0, messages_1.createTimestamp)();\n            if (result === \"pending\") {\n                if (context.messagesEnabled) {\n                    taskTestStepFinished({\n                        testStepId: pickleStep.id,\n                        testCaseStartedId,\n                        testStepResult: {\n                            status: messages.TestStepResultStatus.PENDING,\n                            duration: (0, messages_1.duration)(start, end),\n                        },\n                        timestamp: end,\n                    });\n                    remainingSteps.shift();\n                    for (const skippedStep of remainingSteps) {\n                        const testStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n                        taskTestStepStarted({\n                            testStepId,\n                            testCaseStartedId,\n                            timestamp: (0, messages_1.createTimestamp)(),\n                        });\n                        taskTestStepFinished({\n                            testStepId,\n                            testCaseStartedId,\n                            testStepResult: {\n                                status: messages.TestStepResultStatus.SKIPPED,\n                                duration: {\n                                    seconds: 0,\n                                    nanos: 0,\n                                },\n                            },\n                            timestamp: (0, messages_1.createTimestamp)(),\n                        });\n                    }\n                }\n                for (let i = 0, count = remainingSteps.length; i < count; i++) {\n                    remainingSteps.pop();\n                }\n                cy.then(() => this.skip());\n            }\n            else {\n                if (context.messagesEnabled) {\n                    taskTestStepFinished({\n                        testStepId: pickleStep.id,\n                        testCaseStartedId,\n                        testStepResult: {\n                            status: messages.TestStepResultStatus.PASSED,\n                            duration: (0, messages_1.duration)(start, end),\n                        },\n                        timestamp: end,\n                    });\n                }\n                remainingSteps.shift();\n            }\n        });\n    }\n}",
              "err": {},
              "uuid": "0a9cb528-8f21-404d-ba2d-ecd8b79c5d1b",
              "parentUUID": "8cce195c-a092-42bc-ba28-82082c8568d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Navigate to Sign up Validation (example #2)",
              "fullTitle": "SignUp Page Navigate to Sign up Validation (example #2)",
              "timedOut": null,
              "duration": 2713,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n    taskTestCaseStarted({\n        id: testCaseStartedId,\n        testCaseId,\n        attempt: attempt++,\n        timestamp: (0, messages_1.createTimestamp)(),\n    });\n}\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepStarted({\n                    testStepId: hook.id,\n                    testCaseStartedId,\n                    timestamp: start,\n                });\n            }\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            (0, cypress_1.runStepWithLogGroup)({\n                fn: () => registry.runHook(this, hook),\n                keyword: hook.keyword,\n                text: hook.tags,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const end = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepFinished({\n                    testStepId: hook.id,\n                    testCaseStartedId,\n                    testStepResult: {\n                        status: messages.TestStepResultStatus.PASSED,\n                        duration: (0, messages_1.duration)(start, end),\n                    },\n                    timestamp: end,\n                });\n            }\n            remainingSteps.shift();\n        });\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            internalProperties.currentStep = { pickleStep };\n            const start = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepStarted({\n                    testStepId: pickleStep.id,\n                    testCaseStartedId,\n                    timestamp: start,\n                });\n            }\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            try {\n                return (0, cypress_1.runStepWithLogGroup)({\n                    keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                    argument,\n                    text,\n                    fn: () => registry.runStepDefininition(this, text, argument),\n                }).then((result) => {\n                    return {\n                        start,\n                        result,\n                    };\n                });\n            }\n            catch (e) {\n                if (e instanceof registry_1.MissingDefinitionError) {\n                    throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                }\n                else {\n                    throw e;\n                }\n            }\n        })\n            .then(({ start, result }) => {\n            var _a, _b, _c;\n            const end = (0, messages_1.createTimestamp)();\n            if (result === \"pending\") {\n                if (context.messagesEnabled) {\n                    taskTestStepFinished({\n                        testStepId: pickleStep.id,\n                        testCaseStartedId,\n                        testStepResult: {\n                            status: messages.TestStepResultStatus.PENDING,\n                            duration: (0, messages_1.duration)(start, end),\n                        },\n                        timestamp: end,\n                    });\n                    remainingSteps.shift();\n                    for (const skippedStep of remainingSteps) {\n                        const testStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n                        taskTestStepStarted({\n                            testStepId,\n                            testCaseStartedId,\n                            timestamp: (0, messages_1.createTimestamp)(),\n                        });\n                        taskTestStepFinished({\n                            testStepId,\n                            testCaseStartedId,\n                            testStepResult: {\n                                status: messages.TestStepResultStatus.SKIPPED,\n                                duration: {\n                                    seconds: 0,\n                                    nanos: 0,\n                                },\n                            },\n                            timestamp: (0, messages_1.createTimestamp)(),\n                        });\n                    }\n                }\n                for (let i = 0, count = remainingSteps.length; i < count; i++) {\n                    remainingSteps.pop();\n                }\n                cy.then(() => this.skip());\n            }\n            else {\n                if (context.messagesEnabled) {\n                    taskTestStepFinished({\n                        testStepId: pickleStep.id,\n                        testCaseStartedId,\n                        testStepResult: {\n                            status: messages.TestStepResultStatus.PASSED,\n                            duration: (0, messages_1.duration)(start, end),\n                        },\n                        timestamp: end,\n                    });\n                }\n                remainingSteps.shift();\n            }\n        });\n    }\n}",
              "err": {},
              "uuid": "fb1ddf6c-7fb8-40b2-b3a8-c4575b425517",
              "parentUUID": "8cce195c-a092-42bc-ba28-82082c8568d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Navigate to Sign up Validation (example #3)",
              "fullTitle": "SignUp Page Navigate to Sign up Validation (example #3)",
              "timedOut": null,
              "duration": 2790,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n    taskTestCaseStarted({\n        id: testCaseStartedId,\n        testCaseId,\n        attempt: attempt++,\n        timestamp: (0, messages_1.createTimestamp)(),\n    });\n}\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepStarted({\n                    testStepId: hook.id,\n                    testCaseStartedId,\n                    timestamp: start,\n                });\n            }\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            (0, cypress_1.runStepWithLogGroup)({\n                fn: () => registry.runHook(this, hook),\n                keyword: hook.keyword,\n                text: hook.tags,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const end = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepFinished({\n                    testStepId: hook.id,\n                    testCaseStartedId,\n                    testStepResult: {\n                        status: messages.TestStepResultStatus.PASSED,\n                        duration: (0, messages_1.duration)(start, end),\n                    },\n                    timestamp: end,\n                });\n            }\n            remainingSteps.shift();\n        });\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            internalProperties.currentStep = { pickleStep };\n            const start = (0, messages_1.createTimestamp)();\n            if (context.messagesEnabled) {\n                taskTestStepStarted({\n                    testStepId: pickleStep.id,\n                    testCaseStartedId,\n                    timestamp: start,\n                });\n            }\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            try {\n                return (0, cypress_1.runStepWithLogGroup)({\n                    keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                    argument,\n                    text,\n                    fn: () => registry.runStepDefininition(this, text, argument),\n                }).then((result) => {\n                    return {\n                        start,\n                        result,\n                    };\n                });\n            }\n            catch (e) {\n                if (e instanceof registry_1.MissingDefinitionError) {\n                    throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                }\n                else {\n                    throw e;\n                }\n            }\n        })\n            .then(({ start, result }) => {\n            var _a, _b, _c;\n            const end = (0, messages_1.createTimestamp)();\n            if (result === \"pending\") {\n                if (context.messagesEnabled) {\n                    taskTestStepFinished({\n                        testStepId: pickleStep.id,\n                        testCaseStartedId,\n                        testStepResult: {\n                            status: messages.TestStepResultStatus.PENDING,\n                            duration: (0, messages_1.duration)(start, end),\n                        },\n                        timestamp: end,\n                    });\n                    remainingSteps.shift();\n                    for (const skippedStep of remainingSteps) {\n                        const testStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n                        taskTestStepStarted({\n                            testStepId,\n                            testCaseStartedId,\n                            timestamp: (0, messages_1.createTimestamp)(),\n                        });\n                        taskTestStepFinished({\n                            testStepId,\n                            testCaseStartedId,\n                            testStepResult: {\n                                status: messages.TestStepResultStatus.SKIPPED,\n                                duration: {\n                                    seconds: 0,\n                                    nanos: 0,\n                                },\n                            },\n                            timestamp: (0, messages_1.createTimestamp)(),\n                        });\n                    }\n                }\n                for (let i = 0, count = remainingSteps.length; i < count; i++) {\n                    remainingSteps.pop();\n                }\n                cy.then(() => this.skip());\n            }\n            else {\n                if (context.messagesEnabled) {\n                    taskTestStepFinished({\n                        testStepId: pickleStep.id,\n                        testCaseStartedId,\n                        testStepResult: {\n                            status: messages.TestStepResultStatus.PASSED,\n                            duration: (0, messages_1.duration)(start, end),\n                        },\n                        timestamp: end,\n                    });\n                }\n                remainingSteps.shift();\n            }\n        });\n    }\n}",
              "err": {},
              "uuid": "c9d885cb-932d-477a-8dfe-3d017e5f8e8b",
              "parentUUID": "8cce195c-a092-42bc-ba28-82082c8568d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a9cb528-8f21-404d-ba2d-ecd8b79c5d1b",
            "fb1ddf6c-7fb8-40b2-b3a8-c4575b425517",
            "c9d885cb-932d-477a-8dfe-3d017e5f8e8b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9357,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[status]_[datetime]-[name]",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "[status]_[datetime]-[name]",
        "reportTitle": "Cypress Automated Suite",
        "reportDir": "results",
        "screenshotsFolder": "screenshots",
        "overwrite": true,
        "timestamp": "mm-dd-yyyy HH:MM",
        "charts": true,
        "screenshots": true,
        "html": false
      },
      "version": "6.2.0"
    }
  }
}